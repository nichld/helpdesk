<div class="max-w-2xl mx-auto">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold text-gray-900">
      Submit Feedback
    </h1>
    <a href="/tickets/<%= ticketId %>" class="text-blue-600 hover:text-blue-800 text-sm flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to ticket
    </a>
  </div>

  <div class="bg-white border border-gray-200 rounded-lg p-6 mb-8">
    <div class="text-center mb-6">
      <p class="text-lg font-medium text-gray-900">Thank you for using our support services!</p>
      <p class="text-gray-600 mt-1">Your feedback helps us improve our support quality.</p>
    </div>
    
    <form id="feedback-form" class="space-y-6">
      <!-- Overall Rating -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">How would you rate your overall experience?</label>
        <div class="flex space-x-4 justify-center">
          <div id="star-rating" class="flex items-center space-x-1">
            <span class="star cursor-pointer text-3xl" data-value="1">‚òÜ</span>
            <span class="star cursor-pointer text-3xl" data-value="2">‚òÜ</span>
            <span class="star cursor-pointer text-3xl" data-value="3">‚òÜ</span>
            <span class="star cursor-pointer text-3xl" data-value="4">‚òÜ</span>
            <span class="star cursor-pointer text-3xl" data-value="5">‚òÜ</span>
          </div>
        </div>
        <p id="rating-description" class="text-center mt-2 text-sm text-gray-600">Please select a rating</p>
        <input type="hidden" name="rating" id="rating-value">
      </div>

      <!-- Satisfaction Level -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Satisfaction with resolution:</label>
        <div class="grid grid-cols-5 gap-2">
          <div class="satisfaction-option text-center cursor-pointer p-2 border border-gray-200 rounded-lg" data-value="very-dissatisfied">
            <div class="text-2xl mb-1">üò°</div>
            <div class="text-sm">Very Dissatisfied</div>
          </div>
          <div class="satisfaction-option text-center cursor-pointer p-2 border border-gray-200 rounded-lg" data-value="dissatisfied">
            <div class="text-2xl mb-1">üòï</div>
            <div class="text-sm">Dissatisfied</div>
          </div>
          <div class="satisfaction-option text-center cursor-pointer p-2 border border-gray-200 rounded-lg" data-value="neutral">
            <div class="text-2xl mb-1">üòê</div>
            <div class="text-sm">Neutral</div>
          </div>
          <div class="satisfaction-option text-center cursor-pointer p-2 border border-gray-200 rounded-lg" data-value="satisfied">
            <div class="text-2xl mb-1">üôÇ</div>
            <div class="text-sm">Satisfied</div>
          </div>
          <div class="satisfaction-option text-center cursor-pointer p-2 border border-gray-200 rounded-lg" data-value="very-satisfied">
            <div class="text-2xl mb-1">üòÉ</div>
            <div class="text-sm">Very Satisfied</div>
          </div>
        </div>
        <input type="hidden" name="satisfactionLevel" id="satisfaction-value">
      </div>

      <!-- Resolution Time -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">How was the time to resolution?</label>
        <div class="flex justify-center space-x-4">
          <div class="resolution-option cursor-pointer p-2 border border-gray-200 rounded-lg text-center" data-value="too-long">
            <div class="text-2xl mb-1">‚è±Ô∏è</div>
            <div class="text-sm">Too Long</div>
          </div>
          <div class="resolution-option cursor-pointer p-2 border border-gray-200 rounded-lg text-center" data-value="appropriate">
            <div class="text-2xl mb-1">‚è≤Ô∏è</div>
            <div class="text-sm">Appropriate</div>
          </div>
          <div class="resolution-option cursor-pointer p-2 border border-gray-200 rounded-lg text-center" data-value="quick">
            <div class="text-2xl mb-1">‚ö°</div>
            <div class="text-sm">Quick</div>
          </div>
        </div>
        <input type="hidden" name="timeToResolution" id="resolution-value">
      </div>

      <!-- Comments -->
      <div>
        <label for="comments" class="block text-sm font-medium text-gray-700">Additional Comments (optional)</label>
        <textarea
          id="comments"
          name="comments"
          rows="4"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          placeholder="Please share any additional feedback or suggestions..."
        ></textarea>
      </div>

      <!-- Submit Button -->
      <div class="text-center">
        <button
          type="submit"
          class="w-full sm:w-auto px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
        >
          Submit Feedback
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('feedback-form');
    const ratingStars = document.querySelectorAll('.star');
    const ratingValue = document.getElementById('rating-value');
    const ratingDescription = document.getElementById('rating-description');
    const satisfactionOptions = document.querySelectorAll('.satisfaction-option');
    const satisfactionValue = document.getElementById('satisfaction-value');
    const resolutionOptions = document.querySelectorAll('.resolution-option');
    const resolutionValue = document.getElementById('resolution-value');
    
    // Star rating interaction
    ratingStars.forEach(star => {
      star.addEventListener('mouseover', function() {
        const value = parseInt(this.dataset.value);
        highlightStars(value);
      });
      
      star.addEventListener('mouseout', function() {
        const currentRating = parseInt(ratingValue.value) || 0;
        highlightStars(currentRating);
      });
      
      star.addEventListener('click', function() {
        const value = parseInt(this.dataset.value);
        ratingValue.value = value;
        highlightStars(value);
        updateRatingDescription(value);
      });
    });
    
    function highlightStars(count) {
      ratingStars.forEach(star => {
        const value = parseInt(star.dataset.value);
        star.textContent = value <= count ? '‚òÖ' : '‚òÜ';
        star.classList.toggle('text-yellow-500', value <= count);
      });
    }
    
    function updateRatingDescription(rating) {
      const descriptions = {
        1: 'Very Poor',
        2: 'Poor',
        3: 'Average',
        4: 'Good',
        5: 'Excellent'
      };
      ratingDescription.textContent = descriptions[rating] || 'Please select a rating';
    }
    
    // Satisfaction level interaction
    satisfactionOptions.forEach(option => {
      option.addEventListener('click', function() {
        satisfactionOptions.forEach(opt => opt.classList.remove('bg-blue-50', 'border-blue-300'));
        this.classList.add('bg-blue-50', 'border-blue-300');
        satisfactionValue.value = this.dataset.value;
      });
    });
    
    // Resolution time interaction
    resolutionOptions.forEach(option => {
      option.addEventListener('click', function() {
        resolutionOptions.forEach(opt => opt.classList.remove('bg-blue-50', 'border-blue-300'));
        this.classList.add('bg-blue-50', 'border-blue-300');
        resolutionValue.value = this.dataset.value;
      });
    });
    
    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const rating = ratingValue.value;
      const satisfactionLevel = satisfactionValue.value;
      const timeToResolution = resolutionValue.value;
      const comments = document.getElementById('comments').value;
      
      // Validation
      if (!rating) {
        window.showToast('Please provide a star rating', 'error');
        return;
      }
      
      if (!satisfactionLevel) {
        window.showToast('Please select your satisfaction level', 'error');
        return;
      }
      
      if (!timeToResolution) {
        window.showToast('Please indicate the resolution time', 'error');
        return;
      }
      
      const submitButton = form.querySelector('button[type="submit"]');
      submitButton.disabled = true;
      submitButton.textContent = 'Submitting...';
      
      try {
        // Submit the feedback via AJAX
        const response = await fetch('/tickets/<%= ticketId %>/feedback', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            rating: parseInt(rating),
            satisfactionLevel,
            timeToResolution,
            comments
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          // Show success and redirect
          window.showToast('Feedback submitted successfully! Thank you.', 'success');
          
          setTimeout(() => {
            window.location.href = '/tickets/<%= ticketId %>';
          }, 1500);
        } else {
          window.showToast(data.message || 'Failed to submit feedback', 'error');
          submitButton.disabled = false;
          submitButton.textContent = 'Submit Feedback';
        }
      } catch (error) {
        console.error('Error submitting feedback:', error);
        window.showToast('An error occurred while submitting feedback', 'error');
        submitButton.disabled = false;
        submitButton.textContent = 'Submit Feedback';
      }
    });
  });
</script>
