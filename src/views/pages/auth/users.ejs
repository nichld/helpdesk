<div class="flex flex-col gap-6">
  <h1 class="text-3xl font-bold text-gray-900">
    User Management
  </h1>
  
  <% if (typeof error !== 'undefined' && error) { %>
    <div class="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm mb-6">
      <%= error %>
    </div>
  <% } %>
  
  <% if (typeof success !== 'undefined' && success) { %>
    <div class="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-md text-sm mb-6">
      <%= success %>
    </div>
  <% } %>

  <div id="toast-notification" class="hidden fixed top-4 right-4 z-50"></div>

  <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Member Since</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% users.forEach(user => { %>
            <tr data-user-id="<%= user._id %>">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="flex-shrink-0 h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center overflow-hidden">
                    <% if (user.profileImage) { %>
                      <img src="<%= user.profileImage %>" alt="<%= user.firstName %>" class="w-full h-full object-cover">
                    <% } else { %>
                      <span class="font-medium text-gray-700"><%= user.firstName.charAt(0).toUpperCase() %></span>
                    <% } %>
                  </div>
                  <div class="ml-4">
                    <div class="text-sm font-medium text-gray-900"><%= user.firstName %> <%= user.lastName %></div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= user.email %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <% if (user.role === 'admin') { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                    Admin
                  </span>
                <% } else if (user.role === 'employee') { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">
                    Employee
                  </span>
                <% } else { %>
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                    Customer
                  </span>
                <% } %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= new Date(user.createdAt).toLocaleDateString() %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <% if (user.role === 'admin') { %>
                  <!-- Improved admin role badge with lock icon -->
                  <span class="inline-flex items-center px-3 py-1 rounded bg-gray-100 text-gray-700 border border-gray-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                    Admin role locked
                  </span>
                <% } else if (user._id.toString() === locals.user.id) { %>
                  <!-- Improved current user badge with info icon -->
                  <span class="inline-flex items-center px-3 py-1 rounded bg-gray-100 text-gray-700 border border-gray-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Cannot change own role
                  </span>
                <% } else { %>
                  <!-- Enhanced role selection with better styling -->
                  <div class="relative">
                    <select 
                      class="role-select appearance-none bg-white border border-gray-300 hover:border-gray-400 px-3 py-1 pr-8 rounded-md text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                      data-user-id="<%= user._id %>"
                    >
                      <option value="customer" <%= user.role === 'customer' ? 'selected' : '' %>>Customer</option>
                      <option value="employee" <%= user.role === 'employee' ? 'selected' : '' %>>Employee</option>
                      <option value="admin" <%= user.role === 'admin' ? 'selected' : '' %>>Admin</option>
                    </select>
                    <!-- Custom dropdown arrow -->
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                <% } %>
              </td>
            </tr>
          <% }) %>
          
          <% if (users.length === 0) { %>
            <tr>
              <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">No users found</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const roleSelects = document.querySelectorAll('.role-select');
    
    roleSelects.forEach(select => {
      select.addEventListener('change', async function() {
        const userId = this.getAttribute('data-user-id');
        const newRole = this.value;
        const originalValue = this.querySelector(`option[value="${this.value}"]`).textContent;
        
        try {
          const response = await fetch('/users/update-role', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              userId: userId,
              role: newRole
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Update the UI to reflect the new role
            const row = document.querySelector(`tr[data-user-id="${userId}"]`);
            const roleCell = row.querySelector('td:nth-child(3)');
            const actionsCell = row.querySelector('td:nth-child(5)');
            
            // Remove existing span
            roleCell.innerHTML = '';
            
            // Add new span based on role
            let spanClass = '';
            let roleName = '';
            
            if (newRole === 'admin') {
              spanClass = 'bg-red-100 text-red-800';
              roleName = 'Admin';
              
              // Update the actions cell if user became admin
              actionsCell.innerHTML = `
                <span class="inline-flex items-center px-3 py-1 rounded bg-gray-100 text-gray-700 border border-gray-200">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  Admin role locked
                </span>
              `;
            } else if (newRole === 'employee') {
              spanClass = 'bg-purple-100 text-purple-800';
              roleName = 'Employee';
            } else {
              spanClass = 'bg-blue-100 text-blue-800';
              roleName = 'Customer';
            }
            
            roleCell.innerHTML = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${spanClass}">${roleName}</span>`;
            
            // Show success toast message
            showToast('Success', `User role updated to ${roleName}`, 'success');
          } else {
            // Show error toast message
            showToast('Error', result.message || 'Failed to update role', 'error');
            
            // Reset the select dropdown to its previous value
            this.value = Array.from(this.options).find(option => option.textContent === originalValue).value;
          }
        } catch (error) {   
          console.error('Error:', error);
          
          // Show error toast message
          showToast('Error', 'An error occurred while updating the user role', 'error');
          
          // Reset the select dropdown to its previous value
          this.value = Array.from(this.options).find(option => option.textContent === originalValue).value;
        }
      });
    });
    
    // Function to show toast notifications
    function showToast(title, message, type) {
      const toast = document.getElementById('toast-notification');
      
      // Set toast styles based on type
      let bgColor, textColor, borderColor, iconPath;
      
      if (type === 'success') {
        bgColor = 'bg-green-50';
        textColor = 'text-green-800';
        borderColor = 'border-green-200';
        iconPath = 'M5 13l4 4L19 7';
      } else {
        bgColor = 'bg-red-50';
        textColor = 'text-red-800';
        borderColor = 'border-red-200';
        iconPath = 'M6 18L18 6M6 6l12 12';
      }
      
      // Create toast content
      toast.className = `fixed top-4 right-4 z-50 flex items-center p-4 mb-4 ${bgColor} border ${borderColor} rounded-lg shadow`;
      toast.innerHTML = `
        <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 ${bgColor} rounded-lg">
          <svg class="w-5 h-5 ${textColor}" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${iconPath}"/>
          </svg>
        </div>
        <div class="ml-3 text-sm font-normal ${textColor}">
          <span class="font-medium">${title}:</span> ${message}
        </div>
        <button type="button" class="ml-auto -mx-1.5 -my-1.5 ${bgColor} ${textColor} rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8" onclick="this.parentElement.classList.add('hidden')">
          <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
          </svg>
        </button>
      `;
      
      // Show the toast
      toast.classList.remove('hidden');
      
      // Hide after 5 seconds
      setTimeout(() => {
        toast.classList.add('hidden');
      }, 5000);
    }
  });
</script>