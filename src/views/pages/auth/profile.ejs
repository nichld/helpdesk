<div class="flex flex-col gap-6">
  <h1 class="text-3xl font-bold text-gray-900">
    Your Profile
  </h1>

  <% if (typeof error !== 'undefined' && error) { %>
    <div class="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm mb-6">
      <%= error %>
    </div>
  <% } %>
  
  <% if (typeof success !== 'undefined' && success) { %>
    <div class="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-md text-sm mb-6">
      <%= success %>
    </div>
  <% } %>
  
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    <!-- Left column: Profile picture and basic info -->
    <div class="bg-white border border-gray-200 rounded-lg p-6">
      <div class="flex flex-col items-center text-center">
        <div class="mb-4 relative">
          <div id="profile-image-container" class="w-32 h-32 rounded-full bg-gray-100 flex items-center justify-center overflow-hidden border-4 border-white shadow">
            <% if (user.profileImage) { %>
              <img id="profile-preview" src="<%= user.profileImage %>" alt="Profile" class="w-full h-full object-cover">
            <% } else { %>
              <span class="text-4xl font-bold text-gray-400"><%= user.firstName.charAt(0).toUpperCase() %></span>
            <% } %>
          </div>
          <div class="absolute bottom-0 right-0 flex space-x-2">
            <button type="button" id="change-avatar-btn" class="bg-blue-600 text-white rounded-full p-2 shadow hover:bg-blue-700 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </button>
            <button type="button" id="take-photo-btn" class="bg-green-600 text-white rounded-full p-2 shadow hover:bg-green-700 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
            </button>
          </div>
        </div>
        
        <h2 class="text-xl font-semibold"><%= user.firstName %> <%= user.lastName %></h2>
        <p class="text-gray-500 mt-1"><%= user.email %></p>
        
        <div class="mt-3">
          <% if (user.role === 'admin') { %>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
              Admin
            </span>
          <% } else if (user.role === 'employee') { %>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
              Employee
            </span>
          <% } else { %>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              Customer
            </span>
          <% } %>
        </div>
        
        <div class="mt-4 text-sm text-gray-500">
          <% if (user.createdAt) { %>
            Member since <%= new Date(user.createdAt).toLocaleDateString() %>
          <% } else { %>
            Member
          <% } %>
        </div>
      </div>
    </div>
    
    <!-- Right column: Edit profile form -->
    <div class="bg-white border border-gray-200 rounded-lg p-6 md:col-span-2">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Edit Profile</h3>
      
      <form action="/profile/update" method="POST" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="firstName" class="block text-sm font-medium text-gray-700">First Name</label>
            <input 
              type="text" 
              id="firstName" 
              name="firstName" 
              value="<%= user.firstName %>"
              class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              minlength="2"
            >
          </div>
          
          <div>
            <label for="lastName" class="block text-sm font-medium text-gray-700">Last Name</label>
            <input 
              type="text" 
              id="lastName" 
              name="lastName" 
              value="<%= user.lastName %>"
              class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              minlength="2"
            >
          </div>
        </div>
        
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            value="<%= user.email %>"
            class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          >
        </div>
        
        <div>
          <label for="profileImage" class="block text-sm font-medium text-gray-700">Profile Image URL</label>
          <div class="flex mt-1">
            <input 
              type="text" 
              id="profileImage" 
              name="profileImage" 
              value="<%= user.profileImage || '' %>"
              placeholder="URL or upload an image"
              class="w-full px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              readonly
            >
            <button 
              type="button"
              id="browse-image-btn" 
              class="bg-gray-200 text-gray-700 px-4 py-2 border border-l-0 border-gray-300 rounded-r-md hover:bg-gray-300"
            >
              Browse
            </button>
          </div>
          <p class="text-xs text-gray-500 mt-1">Upload an image, use URL, or take a photo with your camera</p>
        </div>
        
        <div>
          <label for="bio" class="block text-sm font-medium text-gray-700">Bio</label>
          <textarea 
            id="bio" 
            name="bio" 
            rows="3"
            class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Tell us about yourself"
          ><%= user.bio || '' %></textarea>
        </div>
        
        <div>
          <label for="currentPassword" class="block text-sm font-medium text-gray-700">Current Password <span class="text-red-500">*</span></label>
          <input 
            type="password" 
            id="currentPassword" 
            name="currentPassword" 
            class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          >
          <p class="text-xs text-gray-500 mt-1">Required to save changes</p>
        </div>
        
        <div class="pt-4 border-t border-gray-200">
          <h4 class="text-sm font-medium text-gray-900 mb-3">Change Password (Optional)</h4>
          
          <div class="space-y-4">
            <div>
              <label for="newPassword" class="block text-sm font-medium text-gray-700">New Password</label>
              <input 
                type="password" 
                id="newPassword" 
                name="newPassword" 
                class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                minlength="6"
              >
            </div>
            
            <div>
              <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirm New Password</label>
              <input 
                type="password" 
                id="confirmPassword" 
                name="confirmPassword" 
                class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
            </div>
          </div>
        </div>
        
        <div class="flex justify-end">
          <button 
            type="submit" 
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700"
          >
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
  
  <!-- File Input (Hidden) -->
  <input type="file" id="file-input" accept="image/*" class="hidden">
  
  <!-- Avatar URL modal (improved) -->
  <div id="avatar-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg max-w-lg w-full p-6">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Update Profile Picture</h3>
      
      <div class="grid grid-cols-1 gap-4">
        <div class="mb-4 border-b border-gray-200 pb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">Option 1: Enter Image URL</label>
          <input 
            type="url" 
            id="avatarUrl" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="https://example.com/image.jpg"
            value="<%= user.profileImage || '' %>"
          >
        </div>
        
        <div class="mb-4 border-b border-gray-200 pb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">Option 2: Upload an Image</label>
          <div class="flex items-center justify-center">
            <button 
              id="upload-photo-btn"
              class="flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
              </svg>
              Choose File
            </button>
          </div>
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">Option 3: Take a Photo</label>
          <div class="flex items-center justify-center">
            <button 
              id="modal-camera-btn"
              class="flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              Open Camera
            </button>
          </div>
        </div>
      </div>
      
      <div class="flex justify-end gap-3 mt-4">
        <button 
          type="button" 
          id="cancel-avatar-btn"
          class="px-4 py-2 border border-gray-300 rounded-md text-sm text-gray-700 hover:bg-gray-50"
        >
          Cancel
        </button>
        <button 
          type="button" 
          id="save-avatar-btn"
          class="px-4 py-2 bg-blue-600 rounded-md text-sm text-white hover:bg-blue-700"
        >
          Save
        </button>
      </div>
    </div>
  </div>
  
  <!-- Camera modal -->
  <div id="camera-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-90 flex flex-col items-center justify-center z-50">
    <div class="relative bg-white rounded-lg max-w-xl w-full p-4 mx-4">
      <h3 class="text-lg font-medium text-gray-900 mb-2">Take a Photo</h3>
      
      <!-- Video stream container -->
      <div class="relative bg-black rounded-lg overflow-hidden">
        <video id="camera-stream" class="w-full h-64 md:h-80 object-cover" autoplay playsinline></video>
        <canvas id="camera-canvas" class="hidden absolute top-0 left-0 w-full h-full"></canvas>
      </div>
      
      <div class="flex justify-between items-center mt-4">
        <button 
          type="button" 
          id="close-camera-btn"
          class="px-4 py-2 border border-gray-300 rounded-md text-sm text-gray-700 hover:bg-gray-50"
        >
          Cancel
        </button>
        
        <button 
          type="button" 
          id="switch-camera-btn"
          class="px-4 py-2 border border-gray-300 rounded-md text-sm text-gray-700 hover:bg-gray-50"
        >
          Switch Camera
        </button>
        
        <button 
          type="button" 
          id="capture-photo-btn"
          class="px-4 py-2 bg-green-600 rounded-md text-sm text-white hover:bg-green-700 flex items-center"
        >
          <svg class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
          </svg>
          Capture
        </button>
      </div>
    </div>
  </div>
  
  <!-- Loading overlay -->
  <div id="loading-overlay" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-[60]">
    <div class="bg-white rounded-lg p-4 flex items-center">
      <svg class="animate-spin h-5 w-5 text-blue-600 mr-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span>Uploading image...</span>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const avatarModal = document.getElementById('avatar-modal');
    const cameraModal = document.getElementById('camera-modal');
    const changeAvatarBtn = document.getElementById('change-avatar-btn');
    const takePhotoBtn = document.getElementById('take-photo-btn');
    const cancelAvatarBtn = document.getElementById('cancel-avatar-btn');
    const saveAvatarBtn = document.getElementById('save-avatar-btn');
    const browseImageBtn = document.getElementById('browse-image-btn');
    const uploadPhotoBtn = document.getElementById('upload-photo-btn');
    const modalCameraBtn = document.getElementById('modal-camera-btn');
    const closeCameraBtn = document.getElementById('close-camera-btn');
    const switchCameraBtn = document.getElementById('switch-camera-btn');
    const capturePhotoBtn = document.getElementById('capture-photo-btn');
    const avatarUrlInput = document.getElementById('avatarUrl');
    const profileImageInput = document.getElementById('profileImage');
    const fileInput = document.getElementById('file-input');
    const profilePreview = document.getElementById('profile-preview');
    const profileImageContainer = document.getElementById('profile-image-container');
    const loadingOverlay = document.getElementById('loading-overlay');
    const cameraStream = document.getElementById('camera-stream');
    const cameraCanvas = document.getElementById('camera-canvas');
    
    // Camera variables
    let stream = null;
    let facingMode = 'user'; // Default to front camera
    
    // Show avatar modal
    changeAvatarBtn.addEventListener('click', function() {
      avatarModal.classList.remove('hidden');
    });
    
    // Hide avatar modal
    cancelAvatarBtn.addEventListener('click', function() {
      avatarModal.classList.add('hidden');
    });
    
    // Save URL from the modal
    saveAvatarBtn.addEventListener('click', function() {
      const url = avatarUrlInput.value.trim();
      if (url) {
        profileImageInput.value = url;
        updateProfilePreview(url);
      }
      avatarModal.classList.add('hidden');
    });
    
    // Open file dialog when browse button is clicked
    browseImageBtn.addEventListener('click', function() {
      fileInput.click();
    });
    
    // Open file dialog when upload button in modal is clicked
    uploadPhotoBtn.addEventListener('click', function() {
      fileInput.click();
    });
    
    // Handle file selection
    fileInput.addEventListener('change', function() {
      if (this.files && this.files[0]) {
        handleFileUpload(this.files[0]);
      }
    });
    
    // Open camera modal from profile page
    takePhotoBtn.addEventListener('click', function() {
      startCamera();
    });
    
    // Open camera modal from avatar modal
    modalCameraBtn.addEventListener('click', function() {
      avatarModal.classList.add('hidden');
      startCamera();
    });
    
    // Close camera modal
    closeCameraBtn.addEventListener('click', function() {
      stopCamera();
      cameraModal.classList.add('hidden');
    });
    
    // Switch between front and back cameras
    switchCameraBtn.addEventListener('click', function() {
      facingMode = facingMode === 'user' ? 'environment' : 'user';
      stopCamera();
      startCamera();
    });
    
    // Capture photo button
    capturePhotoBtn.addEventListener('click', function() {
      capturePhoto();
    });
    
    // Start camera function
    function startCamera() {
      cameraModal.classList.remove('hidden');
      
      // Check if browser supports getUserMedia
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        alert('Your browser does not support camera access');
        cameraModal.classList.add('hidden');
        return;
      }
      
      // Get the proper camera based on facingMode
      navigator.mediaDevices.getUserMedia({
        video: { 
          facingMode: facingMode,
          width: { ideal: 1280 },
          height: { ideal: 720 }
        },
        audio: false
      })
      .then(function(mediaStream) {
        stream = mediaStream;
        cameraStream.srcObject = mediaStream;
      })
      .catch(function(error) {
        console.error('Error accessing camera:', error);
        alert('Unable to access camera: ' + error.message);
        cameraModal.classList.add('hidden');
      });
    }
    
    // Stop camera function
    function stopCamera() {
      if (stream) {
        stream.getTracks().forEach(track => {
          track.stop();
        });
        stream = null;
      }
    }
    
    // Capture photo function
    function capturePhoto() {
      if (!stream) return;
      
      const context = cameraCanvas.getContext('2d');
      
      // Set canvas dimensions to video dimensions
      cameraCanvas.width = cameraStream.videoWidth;
      cameraCanvas.height = cameraStream.videoHeight;
      
      // Draw video frame to canvas
      context.drawImage(cameraStream, 0, 0, cameraCanvas.width, cameraCanvas.height);
      
      // Convert to blob
      cameraCanvas.toBlob(function(blob) {
        // Close camera
        stopCamera();
        cameraModal.classList.add('hidden');
        
        // Upload the captured photo
        handleFileUpload(blob);
      }, 'image/jpeg', 0.9);
    }
    
    // Handle file upload
    function handleFileUpload(file) {
      // Show loading
      loadingOverlay.classList.remove('hidden');
      
      // Create form data
      const formData = new FormData();
      formData.append('profileImage', file);
      
      // Send to server
      fetch('/profile/upload-image', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        loadingOverlay.classList.add('hidden');
        
        if (data.success) {
          // Update profile image and input field
          profileImageInput.value = data.profileImage;
          updateProfilePreview(data.profileImage);
          avatarModal.classList.add('hidden');
        } else {
          alert('Error uploading image: ' + (data.message || 'Unknown error'));
        }
      })
      .catch(error => {
        loadingOverlay.classList.add('hidden');
        console.error('Error:', error);
        alert('An error occurred while uploading the image');
      });
    }
    
    // Update profile preview
    function updateProfilePreview(imageUrl) {
      if (!profilePreview) {
        // Create new image element if it doesn't exist
        const newImg = document.createElement('img');
        newImg.id = 'profile-preview';
        newImg.alt = 'Profile';
        newImg.className = 'w-full h-full object-cover';
        newImg.src = imageUrl;
        
        // Clear container and append new image
        profileImageContainer.innerHTML = '';
        profileImageContainer.appendChild(newImg);
      } else {
        // Update existing image
        profilePreview.src = imageUrl;
      }
    }
    
    // Password confirmation check (unchanged)
    document.querySelector('form').addEventListener('submit', function(e) {
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      
      if (newPassword && newPassword !== confirmPassword) {
        e.preventDefault();
        alert('New passwords do not match. Please try again.');
      }
    });
  });
</script>
